# set the PS1
if $(grep -q "Ubuntu" /etc/os-release); then
    source /etc/bash_completion.d/git-prompt
elif $(grep -qi -e "centos" -e "fedora" /etc/os-release); then
    source /usr/share/git-core/contrib/completion/git-prompt.sh
elif $(grep -qi -e "arch" /etc/os-release); then
    source /usr/share/git/git-prompt.sh
elif $(uname -a | grep -qi -e "darwin"); then
    source /usr/local/etc/bash_completion.d/git-prompt.sh
fi

# Git prompt control variables
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWUPSTREAM="auto name"
GIT_PS1_DESCRIBE_STYLE="branch"
GIT_PS1_SHOWCOLORHINTS=1

function get_sha {
    git rev-parse --short HEAD 2> /dev/null
}

function prompt {
    local last_command_status=$?

    PS1=""
    PS1+="\[\033[00;37m\]\u@${HOSTNAME,,} " # set user and host
    PS1+="\[\033[00;34m\]\w " # set current location

    if [[ -n "$VIRTUAL_ENV"  ]]; then
        PS1+="\[\033[00;32m\]" # set virtualenv color
        PS1+="<$(echo $VIRTUAL_ENV | awk -F "/" '{print $(NF-1)}')> "
        PS1+="\[\033[00m\]" # reset color
    fi

    PS1+="\[\033[00;33m\]" # set git color
    PS1+='$(__git_ps1 "(%s $(get_sha))")' # call __git_ps1 from git prompt shell script to get git information

    if [[ $last_command_status == 0 ]]; then
        PS1+="\n\[\033[00;36m\]❯ " # set newline and prompt to blue
    else
        PS1+="\n\[\033[00;31m\]❯ " # set newline and prompt to red
    fi
    PS1+="\[\033[00m\]" # reset color
}

PROMPT_COMMAND='prompt'
