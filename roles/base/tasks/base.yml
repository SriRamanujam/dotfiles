- name: Refresh package repositories
  become: true
  ansible.builtin.apt:
    update_cache: yes
  when: ansible_distribution == 'Ubuntu'

- name: Refresh Homebrew
  when: ansible_system == 'Darwin'
  community.general.homebrew:
    upgrade_all: yes

- name: Install common base set of packages
  become: true
  ansible.builtin.package:
    name:
      - htop
      - neovim
      - most
      - ripgrep
      - rsync
      - tmux
      - unzip
      - "{{ xz_pkg_name }}"
      - curl
      - wget
      - "{{ netcat_pkg_name }}"
      - ca-certificates
      - ansible
      - jq
      - git
      - git-lfs
      - zip
      - "{{ p7zip_pkg_name }}"
    state: present

- name: Install SSH tools
  become: true
  when: ansible_system == 'Linux'
  ansible.builtin.package:
    state: present
    name:
      - openssh-server
      - "{{ openssh_client_pkg_name }}"

- name: Install development tools
  become: true
  when: ansible_system == 'Linux'
  ansible.builtin.package:
    state: present
    name:
      - make
      - "{{ development_tools }}"

- name: Install GNU coreutils
  when: ansible_system == 'Darwin'
  ansible.builtin.package:
    state: present
    name:
      - binutils
      - coreutils
      - gnu-tar

- name: Ensure local bin directory exists
  ansible.builtin.file:
    path: "{{ local_bin_dir }}"
    state: directory
    mode: '0755'

- name: Ensure bash config directory is present
  ansible.builtin.file:
    path: "{{ bash_config_dir }}"
    state: directory
    mode: '0755'

- name: Ensure bash dropins directory is present
  ansible.builtin.file:
    path: "{{ bash_config_dropins_dir }}"
    state: directory
    mode: '0755'

- name: Ensure .bashrc is present
  ansible.builtin.template:
    src: bashrc.j2
    dest: "{{ bash_config_dir }}/bashrc"
    mode: '0755'

- name: Ensure .bashrc is symlinked out to home dir
  ansible.builtin.file:
    src: "{{ bash_config_dir }}/bashrc"
    dest: "{{ ansible_env.HOME }}/.bashrc"
    state: link
    force: yes

- name: Ensure base bashrc snippets are dropped into place
  ansible.builtin.copy:
    src: bashrc_dropins/
    dest: "{{ bash_config_dropins_dir }}/"
    mode: preserve

- name: Ensure .bash_profile is present
  ansible.builtin.copy:
    src: bash_profile
    dest: "{{ bash_config_dir }}/bash_profile"
    mode: preserve

- name: Ensure .bash_profile is symlinked out to home dir
  ansible.builtin.file:
    src: "{{ bash_config_dir }}/bash_profile"
    dest: "{{ ansible_env.HOME }}/.bash_profile"
    state: link
    force: yes

- name: Ensure latest bash-preexec.sh is present
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh
    dest: "{{ bash_config_dir }}/bash-preexec.sh"

- name: Ensure bash-preexec.sh is symlinked out to home dir
  ansible.builtin.file:
    src: "{{ bash_config_dir }}/bash-preexec.sh"
    dest: "{{ ansible_env.HOME }}/.bash-preexec.sh"
    state: link
    force: yes

- name: Install oh-my-posh
  block:
    - name: Fetch latest oh-my-posh release from Github
      ansible.builtin.uri:
        url: https://api.github.com/repos/jandedobbeleer/oh-my-posh/releases/latest
        return_content: yes
      register: oh_my_posh_latest_release

    - name: Fetch sha256sum of latest release
      ansible.builtin.uri:
        url: "{{ oh_my_posh_latest_release.json | json_query('assets[?name==`posh-linux-amd64.sha256`].browser_download_url') | first }}"
        return_content: yes
      register: oh_my_posh_latest_release_checksum

    - name: Download and install latest oh-my-posh release
      ansible.builtin.get_url:
        dest: "{{ local_bin_dir }}/oh-my-posh"
        mode: 0755
        url: "{{ oh_my_posh_latest_release.json | json_query('assets[?name==`posh-linux-amd64`].browser_download_url') | first }}"
        checksum: "sha256:{{ oh_my_posh_latest_release_checksum.content }}"
